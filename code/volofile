/*jslint regexp: true */
/*global define, console, process */

define(function (require) {
    'use strict';

    var tempDir = 'temp',
        reverseDomain = 'com.jrburke.GExplore',
        reverseSuffix = reverseDomain.split('.').pop(),
        reverseDomainPath = reverseDomain.replace(/\./g, '/'),

        androidBase = 'android/GExplore/',

        iosBase = 'ios/GExplore/';

    return {

        android: function (d, v, namedArgs, url) {
            var sourcePrefix = androidBase + '/src/' +
                             reverseDomainPath + '/' +
                             reverseSuffix + '.java',
                xmlPrefix = androidBase + '/res/xml/cordova.xml',
                contents;

            if (url) {
                //Want to do live reload editing. Modify android source
                //files to load the live URL, and allow access to
                //it in the cordova.xml file.

                v.copyFile(sourcePrefix, tempDir + '/' + sourcePrefix);
                v.copyFile(xmlPrefix, tempDir + '/' + xmlPrefix);

                contents = v.read(sourcePrefix)
                            .replace(/super.loadUrl\([^\)]+\)/,
                                     'super.loadUrl("' + url + '")');
                v.write(sourcePrefix, contents);

                contents = v.read(xmlPrefix)
                            .replace(/<access/,
                                     //Remove the port from the url.
                                     '<access origin="' + url.replace(/(\:\d+)?(\/)?.*$/, '') + '"/><access');

            } else {
                v.copyDir('www', androidBase + 'assets/www');
            }

            function cleanUp(value) {
                if (url) {
                    //Copy original files back over.
                    v.copyFile(tempDir + '/' + sourcePrefix, sourcePrefix);
                    v.copyFile(tempDir + '/' + xmlPrefix, xmlPrefix);
                    v.rm(tempDir);
                }
                return value;
            }

            d.resolve(v.shell(androidBase + 'cordova/debug', {
                useConsole: !namedArgs.quiet
            }).then(cleanUp, cleanUp));
        },

        ios: function (d, v, namedArgs, url) {
            v.copyDir('www', iosBase + 'www');

             d.resolve(v.shell(iosBase + 'cordova/debug', {
                useConsole: !namedArgs.quiet
            }));
        },

        build: {
            flags: {
                //Does not print the build output.
                'q': 'quiet'
            },

            run: function (d, v, namedArgs) {
                //Remove the old dir
                v.rm('www-built');

                d.resolve(v.spawn('node', ['tools/r.js', '-o', 'tools/build.js'], {
                    useConsole: !namedArgs.quiet
                }));
            }
        }
    };
});
